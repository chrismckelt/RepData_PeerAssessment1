source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
summary(mean_daily_steps)
names(mean_da)
names(mean_daily_steps)
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
qplot(steps, data = mean_daily_steps, geom = "histogram", xlab = "Daily Number of Steps", binwidth = 300)
qplot(activity_data$steps, data = mean_daily_steps, geom = "histogram", xlab = "Daily Number of Steps", binwidth = 300)
qplot(mean_daily_steps, data = activity_data$steps, geom = "histogram", xlab = "Daily Number of Steps", binwidth = 300)
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
qplot(steps, data = mean_daily_steps, geom = "histogram", xlab = "Daily Number of Steps", binwidth = 300)
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
average.steps <- tapply(daily_steps$date, activity_data$interval, mean, na.rm = T)
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
median.daily.steps <- median(daily.steps$steps, na.rm = TRUE)
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
activity.interval <- activity.data %>% group_by(interval) %>% summarise(mean_steps = mean(steps, na.rm = TRUE))
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
activity.interval.plot <- ggplot(data = activity.interval, mapping = aes(x = interval, y = meanSteps)) +     geom_line() + scale_x_continuous("Day Interval", breaks = seq(min(activity.interval$interval),     max(activity.interval$interval), 100)) + scale_y_continuous("Average Number of Steps") +     ggtitle("Average Number of Steps Taken by Interval") activity.interval.plot
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
activity.interval.plot <- ggplot(data = activity.interval, mapping = aes(x = interval, y = mean_steps)) +     geom_line() + scale_x_continuous("Day Interval", breaks = seq(min(activity.interval$interval),     max(activity.interval$interval), 100)) + scale_y_continuous("Average Number of Steps") +     ggtitle("Average Number of Steps Taken by Interval") activity.interval.plot
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
activity.interval.plot <- ggplot(data = activity.interval, mapping = aes(x = interval, y = mean_steps)) +     geom_line() + scale_x_continuous("Day Interval", breaks = seq(min(activity.interval$interval),     max(activity.interval$interval), 100)) + scale_y_continuous("Average Number of Steps") +     ggtitle("Average Number of Steps Taken by Interval") activity.interval.plot
total.missing.days <- length(sapply(activity.data$steps, is.na))
total.missing.days <- length(sapply(activity.data$steps, is.na==true))
total.missing.days <- activity.data$steps %>% filter(is.na) %>% count
total.missing.days <- length(activity.data$steps %>% filter(is.na) )
total.missing.days <- activity.data$steps %>% filter(is.na(step)) %>% count
activity.data$steps
total.missing.days <- activity.data$steps %>% filter(is.na[1]) %>% count
total.missing.days <- activity.data$steps %>% filter(is.na(1)) %>% count
total.missing.days <- is.na(activity.data$steps)
total.missing.days <- length(is.na(activity.data$steps))
total.missing.days <- activity.data$steps[is.Na]
total.missing.days <- activity.data$steps[is.na]
total.missing.days <- nrow(activity.data[is.na(activity.data$steps)])
missing.days <- is.na(activity.data$steps) total.missing.days <- length(activity.data[missing.days]) total.missing.days
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
missing.days <- is.na(activity.data$steps) total.missing.days <- length(activity.data[missing.days]) total.missing.days
missing.days <- is.na(activity.data$steps)
total.missing.days <- length(activity.data[missing.days])
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
missing.days < -Filter(Negate(is.null), activity.data$steps)
present.days = na.omit(activity.data$steps)
missing.days < -length(activity.data$steps) - missing.days
missing.days < -length(activity.data$steps) - present.days
missing.days < -length(activity.data$steps) - present.days
present.days <- na.omit(activity.data$steps)
missing.days <- length(activity.data$steps) - present.days
length(missing.days)length(missing.days)
sum(missing.days)
count(missing.days)
length(missing.days)
missing.days <- length(activity.data$steps) - length(present.days)
present.days <- na.omit(activity.data$steps) missing.days <- length(activity.data$steps) - length(present.days)
max.steps = which.max(activity.interval$mean_steps)
max.steps = activity.interval[activity.interval$mean_steps=which.max(activity.interval$mean_steps)]
max.steps = activity.interval[activity.interval$mean_steps==which.max(activity.interval$mean_steps)]
max.steps = activity.interval[which.max(activity.interval$mean_steps)]
max.steps = activity.interval[mean_steps=which.max(activity.interval$mean_steps)]
max.steps = activity.interval[which.max(activity.interval$mean_steps)]
max.steps = activity.interval[,which.max(activity.interval$mean_steps)]
max.steps = subset(activity.interval, select = which.max(activity.interval$mean_steps))
max.steps = subset(activity.interval, select = mean_steps=which.max(activity.interval$mean_steps))
max.steps = activity.interval[activity.interval$mean_steps==which.max(activity.interval$mean_steps)])
max.steps = activity.interval[activity.interval$mean_steps==which.max(activity.interval$mean_steps)]
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
library(dplyr) library(ggplot2) ## Loading and preprocessing the data rm(list = ls()) # clear vars setwd("C:\\dev\\RepData_PeerAssessment1\\") activity.data <- read.csv(unz("activity.zip", "activity.csv"), colClasses = c("integer", "Date", "integer")) activity.data$date <- as.POSIXct(activity.data$date) ## What is mean total number of steps taken per day? #Calculate the total number of steps taken per day total.steps <- tapply(activity.data$steps, activity.data$date, FUN = sum, na.rm = TRUE) daily.steps <- activity.data %>% group_by(date) %>% summarise(Steps = sum(steps)) names(daily.steps) <- c("Date", "steps") #Calculate and report the mean and median of the total number of steps taken per day mean.daily.steps <- mean(total.steps, na.rm = TRUE) median.daily.steps <- median(total.steps, na.rm = TRUE) #mean.daily.steps:`r mean.daily.steps` #median.daily.steps:`r median.daily.steps`  #Make a histogram of the total number of steps taken each day hist(daily.steps$steps, breaks = 11,      xlab = "number of steps per day",      main = "Histogram of total steps per day") abline(v = mean.daily.steps, col = "red", lwd = 1) abline(v = median.daily.steps, col = "blue", lwd = 1) legend(x = "topright", legend = c("mean", "median"), col = c("red", "blue"), bty = "n", lwd = 3) ## What is the average daily activity pattern? activity.interval <- activity.data %>% group_by(interval) %>% summarise(mean_steps = mean(steps, na.rm = TRUE)) #Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis) activity.interval.plot <- ggplot(data = activity.interval, mapping = aes(x = interval, y = mean_steps)) +     geom_line() + scale_x_continuous("Day Interval", breaks = seq(min(activity.interval$interval),     max(activity.interval$interval), 100)) + scale_y_continuous("Average Number of Steps") +     ggtitle("Average Number of Steps Taken by Interval") activity.interval.plot #Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps? max.steps = activity.interval[activity.interval$mean_steps==which.max(activity.interval$mean_steps)] ## Imputing missing values #Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs) #missing.days <- is.na(activity.data$steps) present.days <- na.omit(activity.data$steps) missing.days <- length(activity.data$steps) - length(present.days) ## Are there differences in activity patterns between weekdays and weekends?
present.days <- na.omit(activity.data$steps) missing.days <- length(activity.data$steps) - length(present.days)
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
plot(row.names(daily.steps), daily.steps, type = "l", xlab = "Time Intervals (5-minute)",     ylab = "Mean number of steps taken (all Days)", main = "Average Steps Taken at 5 minute Intervals",     col = "blue")
plot(row.names(activity.interval), activity.interval, type = "l", xlab = "Time Intervals (5-minute)",     ylab = "Mean number of steps taken (all Days)", main = "Average Steps Taken at 5 minute Intervals",     col = "blue")
activity.interval.plot <- ggplot(data = activity.interval, mapping = aes(x = interval, y = mean_steps)) +     geom_line() + scale_x_continuous("Day Interval", breaks = seq(min(activity.interval$interval),     max(activity.interval$interval), 100)) + scale_y_continuous("Average Number of Steps") + ggtitle("Average Number of Steps Taken by Interval")
activity.interval.plot
activity.data <- activity.data$steps[is.na(activity.data$steps)] <- mean.daily.steps
present.days <- na.omit(activity.data$steps) missing.days <- length(activity.data$steps) - length(present.days)
present.days <- na.omit(activity.data$steps)
activity.data.non.na <- activity.data$steps[is.na(activity.data$steps)] <- mean.daily.steps
library(dplyr) library(ggplot2) ## Loading and preprocessing the data rm(list = ls()) # clear vars setwd("C:\\dev\\RepData_PeerAssessment1\\") activity.data <- read.csv(unz("activity.zip", "activity.csv"), colClasses = c("integer", "Date", "integer")) activity.data$date <- as.POSIXct(activity.data$date) ## What is mean total number of steps taken per day? #Calculate the total number of steps taken per day total.steps <- tapply(activity.data$steps, activity.data$date, FUN = sum, na.rm = TRUE) daily.steps <- activity.data %>% group_by(date) %>% summarise(Steps = sum(steps)) names(daily.steps) <- c("Date", "steps") #Calculate and report the mean and median of the total number of steps taken per day mean.daily.steps <- mean(total.steps, na.rm = TRUE) median.daily.steps <- median(total.steps, na.rm = TRUE) #mean.daily.steps:`r mean.daily.steps` #median.daily.steps:`r median.daily.steps`  #Make a histogram of the total number of steps taken each day hist(daily.steps$steps, breaks = 11,      xlab = "number of steps per day",      main = "Histogram of total steps per day") abline(v = mean.daily.steps, col = "red", lwd = 1) abline(v = median.daily.steps, col = "blue", lwd = 1) legend(x = "topright", legend = c("mean", "median"), col = c("red", "blue"), bty = "n", lwd = 3) ## What is the average daily activity pattern? activity.interval <- activity.data %>% group_by(interval) %>% summarise(mean_steps = mean(steps, na.rm = TRUE)) #Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis) activity.interval.plot <- ggplot(data = activity.interval, mapping = aes(x = interval, y = mean_steps)) +     geom_line() + scale_x_continuous("Day Interval", breaks = seq(min(activity.interval$interval),     max(activity.interval$interval), 100)) + scale_y_continuous("Average Number of Steps") + ggtitle("Average Number of Steps Taken by Interval") activity.interval.plot #Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps? max.steps = activity.interval[activity.interval$mean_steps==which.max(activity.interval$mean_steps)] #max.steps:`r max.steps` ## Imputing missing values #Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs) present.days <- na.omit(activity.data$steps) missing.days <- length(activity.data$steps) - length(present.days) #strategy for filling in missing data (just replace with mean) activity.data.non.na <- activity.data$steps[is.na(activity.data$steps)] <- mean.daily.steps ## Are there differences in activity patterns between weekdays and weekends? activity.data <- average_steps for (i in seq(nrow(data))) {     if (is.na(data[i, "steps"])) {         data$steps_revised[i] <- data[i, "average_steps"]     }     else {         data$steps_revised[i] <- data[i, "steps"]     } }
activity.data$steps[is.na(activity.data$steps)] <- mean.daily.steps
present.days <- na.omit(activity.data$steps)
missing.days <- length(activity.data$steps) - length(present.days)
activity.data.na <- activity.data$steps[is.na(activity.data$steps)] <- mean.daily.steps
library(dplyr) library(ggplot2) ## Loading and preprocessing the data rm(list = ls()) # clear vars setwd("C:\\dev\\RepData_PeerAssessment1\\") activity.data <- read.csv(unz("activity.zip", "activity.csv"), colClasses = c("integer", "Date", "integer")) activity.data$date <- as.POSIXct(activity.data$date) ## What is mean total number of steps taken per day? #Calculate the total number of steps taken per day total.steps <- tapply(activity.data$steps, activity.data$date, FUN = sum, na.rm = TRUE) daily.steps <- activity.data %>% group_by(date) %>% summarise(Steps = sum(steps)) names(daily.steps) <- c("Date", "steps") #Calculate and report the mean and median of the total number of steps taken per day mean.daily.steps <- mean(total.steps, na.rm = TRUE) median.daily.steps <- median(total.steps, na.rm = TRUE) #mean.daily.steps:`r mean.daily.steps` #median.daily.steps:`r median.daily.steps`  #Make a histogram of the total number of steps taken each day hist(daily.steps$steps, breaks = 11,      xlab = "number of steps per day",      main = "Histogram of total steps per day") abline(v = mean.daily.steps, col = "red", lwd = 1) abline(v = median.daily.steps, col = "blue", lwd = 1) legend(x = "topright", legend = c("mean", "median"), col = c("red", "blue"), bty = "n", lwd = 3) ## What is the average daily activity pattern? activity.interval <- activity.data %>% group_by(interval) %>% summarise(mean_steps = mean(steps, na.rm = TRUE)) #Make a time series plot (i.e. type = "l") of the 5-minute interval (x-axis) and the average number of steps taken, averaged across all days (y-axis) activity.interval.plot <- ggplot(data = activity.interval, mapping = aes(x = interval, y = mean_steps)) +     geom_line() + scale_x_continuous("Day Interval", breaks = seq(min(activity.interval$interval),     max(activity.interval$interval), 100)) + scale_y_continuous("Average Number of Steps") + ggtitle("Average Number of Steps Taken by Interval") activity.interval.plot #Which 5-minute interval, on average across all the days in the dataset, contains the maximum number of steps? max.steps = activity.interval[activity.interval$mean_steps==which.max(activity.interval$mean_steps)] #max.steps:`r max.steps` ## Imputing missing values #Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs) present.days <- na.omit(activity.data$steps) missing.days <- length(activity.data$steps) - length(present.days) #strategy for filling in missing data (just replace with mean) activity.data$steps[is.na(activity.data$steps)] <- mean.daily.steps #Create a new dataset that is equal to the original dataset but with the missing data filled in. activity.data.no.na <- activity.data$steps[is.na(activity.data$steps)] <- mean.daily.steps #Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps? #repeat first part of assignment using non NA valued data #Calculate the total number of steps taken per day total.steps.no.na <- tapply(activity.data.no.na$steps, activity.data.no.na$date, FUN = sum, na.rm = TRUE) daily.steps.no.na <- total.steps.no.na %>% group_by(date) %>% summarise(Steps = sum(steps)) names(daily.steps.no.na) <- c("Date", "steps") #Calculate and report the mean and median of the total number of steps taken per day mean.daily.steps.no.na <- mean(total.steps.no.na, na.rm = TRUE) median.daily.steps.no.na <- median(total.steps.no.na, na.rm = TRUE) hist(daily.steps.no.na$steps, breaks = 11,      xlab = "number of steps per day 2",      main = "Histogram of total steps per day 2") abline(v = daily.steps.no.na, col = "red", lwd = 1) abline(v = median.daily.steps.no.na, col = "blue", lwd = 1) legend(x = "topright", legend = c("mean", "median"), col = c("red", "blue"), bty = "n", lwd = 3) ## Are there differences in activity patterns between weekdays and weekends?
activity.data.no.na <- activity.data$steps[is.na(activity.data$steps)] <- mean.daily.steps
total.steps.no.na <- tapply(activity.data.no.na$steps, activity.data.no.na$date, FUN = sum, na.rm = TRUE)
activity.data.no.na <- activity.data[which(is.na),,] <- mean.daily.steps
activity.data.no.na[which(is.na),,] <- mean.daily.steps
activity.data.no.na[which(is.na(activity.data.no.na)),,] <- mean.daily.steps
activity.data.no.na <- activity.data %>% mutate(step = ifelse(is.na(step)), mean, step))
activity.data.no.na <- activity.data %>% mutate(step = ifelse(is.na(step)), mean, step)))
activity.data.no.na <- activity.data %>% mutate(step = ifelse(is.na(step)), mean, step)
activity.data.no.na <- activity.data[strategy]
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
hist(daily.steps.no.na$steps, breaks = 11,     xlab = "number of steps per day 2",     main = "Histogram of total steps per day 2")     abline(v = daily.steps.no.na, col = "red", lwd = 1)     abline(v = median.daily.steps.no.na, col = "blue", lwd = 1)     legend(x = "topright", legend = c("mean", "median"), col = c("red", "blue"), bty = "n", lwd = 3)
     activity.data.no.na <- as.data.frame(lapply(activity.data, FUN = strategy)) #Make a histogram of the total number of steps taken each day and Calculate and report the mean and median total number of steps taken per day. Do these values differ from the estimates from the first part of the assignment? What is the impact of imputing missing data on the estimates of the total daily number of steps? #repeat first part of assignment using non NA valued data #Calculate the total number of steps taken per day total.steps.no.na <- tapply(activity.data.no.na$steps, activity.data.no.na$date, FUN = sum, na.rm = TRUE) daily.steps.no.na <- total.steps.no.na %>% group_by(date) %>% summarise(Steps = sum(steps)) names(daily.steps.no.na) <- c("Date", "steps") #Calculate and report the mean and median of the total number of steps taken per day mean.daily.steps.no.na <- mean(total.steps.no.na, na.rm = TRUE) median.daily.steps.no.na <- median(total.steps.no.na, na.rm = TRUE)
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
## Are there differences in activity patterns between weekdays and weekends? library(timeDate) activity.data$day.type <- "weekday" activity.data$day.type[isWeekend(activity.data$date_revised)] <- "weekend" activity.data$day.type <- as.factor(activity.data$day.type)
install.packages("timeDate")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
library(timeDate)
activity.data$day.type <- "weekday"
activity.data$day.type[weekdays(activity.data$date_revised)] <- "weekend"
activity.data$day.type[weekdays(activity.data$date_revised)] <- "weekend"
activity.data$day.type[isWeekend(activity.data$date_revised)] <- "weekend"
activity.data$day.type[isWeekend(activity.data$date)] <- "weekend"
activity.data$day.type <- as.factor(activity.data$day.type)
mean.weekend.interval <- activity.data[activity.data$day.type == "weekend"][interval]
mean.weekend.interval <- activity.data[activity.data$day.type == "weekend"]$interval
mean.weekend.interval <- activity.data[activity.data$day.type == "weekend"]
mean.weekend.interval <- activity.data[day.type == "weekend"]
mean.weekend.interval <- activity.data[which(activity.data$day.type == "weekend")]
mean.weekend.interval <- activity.data[which(activity.data$day.type == "weekend"),]
mean.weekend.interval <- activity.data[which(activity.data$day.type == "weekend"),]$interval
mean.weekend.interval <- mean(activity.data[which(activity.data$day.type == "weekend"),]$interval)
mean.weekday.interval <- mean(activity.data[which(activity.data$day.type == "weekday"),]$interval)
mean.weekend.interval <- mean(activity.data[which(activity.data$day.type == "weekend"),]$interval)
mean.weekday.interval <- mean(activity.data[which(activity.data$day.type == "weekday"),]$interval)
https: / / ci.appveyor.com / project / fairgofinance / customerportal
mean.weekend.interval
mean.weekday.interval
mean.weekend.interval <- activity.data[which(activity.data$day.type == "weekend"),]
mean.weekday.interval <- activity.data[which(activity.data$day.type == "weekday"),]
weekend.interval.mean <- mean(weekend.steps)
weekend <- activity.data[which(activity.data$day.type == "weekend"),] weekend.interval.mean <- mean(weekend$steps)
library(timeDate) activity.data$day.type <- "weekday" activity.data$day.type[isWeekend(activity.data$date)] <- "weekend" activity.data$day.type <- as.factor(activity.data$day.type)
weekend.interval.mean <- as.integer(weekend$steps / NROW(weekend$date))
weekend <- activity.data[which(activity.data$day.type == "weekend"),] weekday <- activity.data[which(activity.data$day.type == "weekday"),]
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
#https://cran.r-project.org/web/packages/timeDate/index.html library(timeDate) activity.data$day.type <- "weekday" activity.data$day.type[isWeekend(activity.data$date)] <- "weekend" activity.data$day.type <- as.factor(activity.data$day.type)
activity.data$day.type <- as.factor(activity.data$day.type)
weekend <- activity.data[which(activity.data$day.type == "weekend"),]
weekday <- activity.data[which(activity.data$day.type == "weekday"),]
pattern <- ddply(activity.data, c("interval", "day"), summarise, avgSteps = mean(steps))
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
library(timeDate)
activity.data$day.type <- "weekday"
activity.data$day.type[isWeekend(activity.data$date)] <- "weekend"
activity.data$day.type <- as.factor(activity.data$day.type)
weekend <- activity.data[which(activity.data$day.type == "weekend"),]
weekday <- activity.data[which(activity.data$day.type == "weekday"),]
pattern <- ddply(activity.data, c("interval", "day"), summarise, avgSteps = mean(steps))
pattern <- activity.data %>% group_by(c("interval", "day"))) %>% summarise(mean_steps = mean(steps, na.rm = TRUE))
pattern <- activity.data %>% group_by(c("interval", "day"))) %>% summarise(mean_steps = mean(steps, na.rm = TRUE)))
pattern <- activity.data %>% group_by(c("interval", "day")) %>% summarise(mean_steps = mean(steps, na.rm = TRUE)))
pattern <- activity.data %>% group_by(c("interval", "day")) %>% summarise(mean_steps = mean(steps, na.rm = TRUE))
pattern <- activity.data %>% group_by(interval, day)) %>% summarise(mean_steps = mean(steps, na.rm = TRUE))
pattern <- activity.data %>% group_by(interval, day) %>% summarise(mean_steps = mean(steps, na.rm = TRUE))
pattern <- activity.data %>% group_by(interval, date) %>% summarise(mean_steps = mean(steps, na.rm = TRUE))
ggplot(pattern, aes(interval, mean_steps)) + geom_line(aes(colour = day)) + facet_grid(day ~ .) +     ggtitle("Average Daily Activity Per 5-Min Interval (Weekday vs Weekend)") + xlab("interval (24-hours)") +     ylab("Average Number of Steps Taken")
pattern <- activity.data %>% group_by(interval, date) %>% summarise(mean_steps = mean(steps))
activity.data %>% group_by(interval, date) %>% summarise(mean_steps = mean(steps))
ggplot(pattern, aes(interval, mean_steps)) + geom_line(aes(colour = date)) + facet_grid(date ~ .) +     ggtitle("Average Daily Activity Per 5-Min Interval (Weekday vs Weekend)") + xlab("interval (24-hours)") +     ylab("Average Number of Steps Taken")
ggplot(pattern, aes(interval, mean_steps)) + geom_line(aes(colour = day.type)) + facet_grid(day.type ~ .) +     ggtitle("Average Daily Activity Per 5-Min Interval (Weekday vs Weekend)") + xlab("interval (24-hours)") +     ylab("Average Number of Steps Taken")
library(timeDate) activity.data$day.type <- "weekday" activity.data$day.type[isWeekend(activity.data$date)] <- "weekend" activity.data$day.type <- as.factor(activity.data$day.type) ##  Calculate average steps of each 5-minutes interval for weekdays and weekend weekend <- activity.data[which(activity.data$day.type == "weekend"),] weekday <- activity.data[which(activity.data$day.type == "weekday"),]
pattern <- activity.data %>% group_by(interval, date) %>% summarise(mean_steps = mean(steps)) ggplot(pattern, aes(interval, mean_steps)) + geom_line(aes(colour = day.type)) + facet_grid(day.type ~ .) +     ggtitle("Average Daily Activity Per 5-Min Interval (Weekday vs Weekend)") + xlab("interval (24-hours)") +     ylab("Average Number of Steps Taken")
p <- ggplot(pattern, aes(time, mean_steps, group = day.type)) p + geom_line(aes(colour = day.type), size = .7) + labs(x = "Interval", y = "Number of steps", title = "Average daily activity pattern") + scale_x_datetime(labels = date_format("%H:%M"))
p <- ggplot(pattern, aes(time, mean_steps, group = date)) p + geom_line(aes(colour = day.type), size = .7) + labs(x = "Interval", y = "Number of steps", title = "Average daily activity pattern") + scale_x_datetime(labels = date_format("%H:%M"))
library(timeDate)
p <- ggplot(pattern, aes(time, mean_steps, group = date)) p + geom_line(aes(colour = day.type), size = .7) + labs(x = "Interval", y = "Number of steps", title = "Average daily activity pattern") + scale_x_datetime(labels = date_format("%H:%M"))
ggplot(pattern, aes(interval, mean_steps)) + geom_line(aes(colour = day)) + facet_grid(day ~ .) +     ggtitle("Average Daily Activity Per 5-Min Interval (Weekday vs Weekend)") + xlab("interval (24-hours)") +     ylab("Average Number of Steps Taken")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
source("C:/dev/RepData_PeerAssessment1/scratchpad.R", encoding = "Windows-1252")
library(timeDate)
activity.data$day.type <- "weekday"
activity.data$day.type[isWeekend(activity.data$date)] <- "weekend"
activity.data$day.type <- as.factor(activity.data$day.type)
weekend <- activity.data[which(activity.data$day.type == "weekend"),]
weekday <- activity.data[which(activity.data$day.type == "weekday"),]
pattern <- activity.data %>% group_by(interval, date) %>% summarise(mean_steps = mean(steps))
ggplot(pattern, aes(interval, mean_steps)) + geom_line(aes(colour = day)) + facet_grid(day ~ .) +     ggtitle("Average Daily Activity Per 5-Min Interval (Weekday vs Weekend)") + xlab("interval (24-hours)") +     ylab("Average Number of Steps Taken")
pattern <- activity.data %>% group_by(interval, date, day.type) %>% summarise(mean_steps = mean(steps))
ggplot(pattern, aes(interval, mean_steps)) + geom_line(aes(colour = day)) + facet_grid(day ~ .) +     ggtitle("Average Daily Activity Per 5-Min Interval (Weekday vs Weekend)") + xlab("interval (24-hours)") +     ylab("Average Number of Steps Taken")
pattern <- aggregate(steps ~ interval + day.type, data = activity.data, mean)
ggplot(pattern, aes(interval, steps)) + geom_line(aes(colour = day.type)) + facet_grid(day ~ .) +     ggtitle("Average Daily Activity Per 5-Min Interval (Weekday vs Weekend)") + xlab("interval (24-hours)") +     ylab("Average Number of Steps Taken")
xyplot(steps ~ interval | day.type, pattern, type = "l", layout = c(1, 2),  xlab = "Interval", ylab = "Number of steps")
library(lattice)
xyplot(steps ~ interval | day.type, pattern, type = "l", layout = c(1, 2),  xlab = "Interval", ylab = "Number of steps")
weekend <- pattern[which(pattern$day.type == "weekend"),] %>% group_by %>% day.type %>% slice(which.max(mean(steps)))
weekend <- pattern[which(pattern$day.type == "weekend"),] %>% group_by %>% pattern$day.type %>% slice(which.max(mean(steps)))
weekend <- pattern[which(pattern$day.type == "weekend"),] %>% group_by(day.type) %>% slice(which.max(mean(steps)))
weekend <- pattern[which(pattern$day.type == "weekend"),] %>% group_by(day.type) %>% summarise(steps)
